package vscextension.io

import scala.scalajs.concurrent.JSExecutionContext.Implicits.queue
import scala.scalajs.js
import scala.util.{Failure, Success}

import vscextension.facade.NodeFetch.*
import vscextension.facade.vscodeUtils.*

import typings.nodeFetch.mod as nodeFetch

/** network utilities for network operations, like http requests
  *
  * see https://github.com/node-fetch/node-fetch
  */
object network {

  def httpGet(url: String) = {

    val authToken = "123"
    val requestOptions = new RequestOptions(
      method = "GET",
      headers = js.Dynamic.literal(
        "Content-Type" -> "application/json",
        "Authorization" -> s"Bearer $authToken"
      )
    )

    NodeFetch(url, requestOptions).toFuture onComplete {
      case Success(res) =>
        val body = res.text().toFuture foreach { body =>
          // the body of the response
          showMessageAndLog(s"using manual facade: $body")
        }
      case Failure(e) =>
        showMessageAndLog(e.toString)
    }
  }

  def httpGetTyped(url: String) = {
    // use the fetch module generated by scalablytyped
    val requestOptions = new nodeFetch.RequestInit {
      method = "GET"
      headers = new nodeFetch.Headers {
        append("Content-Type", "application/json")
        append("Authorization", "Bearer 123")
      }
    }

    val rF = nodeFetch.default(url, requestOptions)
    rF.toFuture onComplete {
      case Success(res) =>
        val body = res.text().toFuture foreach { body =>
          // the body of the response
          showMessageAndLog(s"using scalablytyped: $body")
        }
      case Failure(e) =>
        showMessageAndLog(e.toString)
    }
  }
}
